---
litterateur:
  totalVideoTime: 0
  totalTextTime: 0
  totalAudioTime: 0
optionalLitterateur:
  totalVideoTime: 0
  totalTextTime: 0
  totalAudioTime: 0
topics:
  - topic: "Object Oriented Programming and C#"
    literature:
    - title: "What are four basic principles of Object Oriented Programming? - by Munish Chandel - Medium"
      url: https://medium.com/@cancerian0684/what-are-four-basic-principles-of-object-oriented-programming-645af8b43727
    - title: "Classes (OOP) - Brilliant Math & Science Wiki"
      url: https://brilliant.org/wiki/classes-oop/
    - title: "Object-Oriented Programming - Brilliant Math & Science Wiki"
      url: https://brilliant.org/wiki/object-oriented-programming/
    - title: "Welcome - C# Refresh"
      url: https://tech.io/playgrounds/52999/c-refresh/welcome
      description: >
        Explore this playground and try new concepts right into your browser
    - title: "Cohesion and Coupling: Two OO Design Principles – Experiences Unlimited"
      url: https://sanaulla.info/2008/06/26/cohesion-and-coupling-two-oo-design-principles/
    optionalLiterature:
    - title: "Object-Oriented Design Decisions: Stateful or Stateless Classes?"
      url: https://dzone.com/articles/stateful-or-stateless-classes
    - title: "C# - Polymorphism - Tutorialspoint"
      url: https://www.tutorialspoint.com/csharp/csharp_polymorphism.htm
    - title: "C# - Abstraction - GeeksforGeeks"
      url: https://www.geeksforgeeks.org/c-sharp-abstraction/
    - title: "A Laboratory For Teaching Object-Oriented Thinking"
      url: http://c2.com/doc/oopsla89/paper.html
      description: >
        Kent Beck and Ward Cunningham
    - title: "How To Do Object Oriented Programming The Right Way - by Xiaoyun Yang - codeburst"
      url: https://codeburst.io/how-to-do-object-oriented-programming-the-right-way-1339c1a25286
    - title: "Coupling And Cohesion"
      url: https://wiki.c2.com/?CouplingAndCohesion
    - title: "Alan Kay and OO Programming"
      url: https://ovid.github.io/articles/alan-kay-and-oo-programming.html
    - title: "OOP Concept for Beginners: What is Encapsulation – Stackify"
      url: https://stackify.com/oop-concept-for-beginners-what-is-encapsulation/
    - title: "Inheritance - C# Programming Guide - Microsoft Docs"
      url: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/inheritance
    - title: "C# - Inheritance - Tutorialspoint"
      url: https://www.tutorialspoint.com/csharp/csharp_inheritance.htm
    - title: "abstract - C# Reference - Microsoft Docs"
      url: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/abstract
    - title: "Polymorphism - C# Programming Guide - Microsoft Docs"
      url: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/polymorphism
  - topic: "Lambda expressions"
    literature:
    - title: "Anatomy of the Lambda Expression"
      url: https://www.tutorialsteacher.com/linq/linq-lambda-expression
    optionalLiterature:
    - title: "Lambda expressions"
      url: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions
    - title: "Delegates"
      url: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/
  - topic: "Design patterns"
    literature:
    - title: "What’s a design pattern?"
      url: https://refactoring.guru/design-patterns/what-is-pattern
    optionalLiterature:
    - title: "Repository Pattern in ASP.NET Core"
      url: https://codewithmukesh.com/blog/repository-pattern-in-aspnet-core/
    - title: ".NET Design Patterns in C# - Gang of Four (GOF)"
      url: https://www.dofactory.com/net/design-patterns
  - topic: "Fluent API"
    literature:
    - title: "API vs. SDK: What's the difference? - YouTube"
      url: https://www.youtube.com/watch?v=kG-fLp9BTRo
    - title: "3 reasons why fluent APIs matter"
      url: https://www.pluralsight.com/blog/software-development/about-fluent-api
    optionalLiterature:
    - title: "Developing a Fluent API is so cool !"
      url: https://medium.com/@ohadinho25/developing-a-fluent-api-is-so-cool-25e99cb64f7d
    - title: "Fluent Code in C#"
      url: https://www.red-gate.com/simple-talk/dotnet/net-framework/fluent-code-in-c/
    - title: "Fluent API Development in C#"
      url: https://www.linkedin.com/learning/fluent-api-development-in-c-sharp/welcome
      description: >
        Fluent APIs use method chaining for maximum readability and flow. They may be slightly more complicated to write, but are much easier to understand and solve specific complex programming challenges that general-purpose languages can't. This training course teaches the what, why, and how of fluent API development using C#. Learn the history of fluent APIs, beginning with the coining of the phrase "fluent" by Martin Fowler. Next, learn how to decide if fluent APIs are right for your project, and how to go about designing them. Instructor Robby Millsap also reviews some popular fluent libraries such as LINQ and Azure Management. Lastly, he takes a simple console application and shows how to refactor it to use fluent prose.
    - title: "FluentInterface"
      url: https://martinfowler.com/bliki/FluentInterface.html
      description: >
        Martin Fowler
  - topic: "Diagrams"
    literature:
    - title: "What is Use Case Diagram?"
      url: https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-use-case-diagram/
  - topic: "Reflection"
    description: >
      This is about reflections
      
      And it contains more
    literature:
    - title: "What is Reflection in C#?"
      url: https://www.geeksforgeeks.org/what-is-reflection-in-c-sharp/
    optionalLiterature:
    - title: "Dynamically Loading and Using Types"
      url: https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/dynamically-loading-and-using-types
    - title: "Reflection (C#)"
      url: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection
  - topic: "Attributes"
    optionalLiterature:
    - title: "Creating Custom Attributes (C#)"
      url: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/creating-custom-attributes
    - title: "Attributes (C#)"
      url: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/
